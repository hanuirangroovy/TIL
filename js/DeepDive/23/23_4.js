// 23.4 실행 컨텍스트 스택

// 23-03
const x = 1;

function foo() {
  const y = 2;

  function bar() {
    const z = 3;
    console.log(x + y + z);
  }
  bar();
}

foo(); // 6

// 자바 스크립트 엔진은 먼저 전역 코드를 평가하여 전역 실행 컨텍스트를 생성. 함수가 호출되면 함수 코드를 평가하여 함수 실행 컨텍스트를 생성.
// 이때 생성된 실행 컨텍스트는 스택 자료구조로 관리. 이를 실행 컨텍스트 스택이라고 부름.

// 1. 전역 코드의 평가와 실행
// 먼저 전역 코드를 평가하여 전역 실행 컨텍스트를 생성하고 실행 컨텍스트 스택에 푸시한다.
// 이때 전역 변수 x와 전역 함수 foo는 전역 실행 컨텍스트에 등록된다. 이후 전역 코드가 실행되기 시작하여 전역 변수 x에 값이 할당되고 전역 함수 foo가 호출된다.

// 2. foo 함수 코드의 평가와 실행
// 전역 함수 foo가 호출되면 전역 코드의 실행은 일시 중단되고 코드의 제어권이 foo 함수 내부로 이동한다.
// foo 함수 내부의 함수 코드를 평가하여 foo 함수 실행 컨텍스트를 생성하고 실행 컨텍스트 스택에 푸시.
// 이때 foo 함수의 지역 변수 y와 중첩 함수 bar가 foo 함수 실행 컨텍스트에 등록된다.
// 이후 foo 함수 코드가 실행되기 시작하여 지역 변수 ydp 값이 할당되고 중첩 함수 bar가 호출된다.

// 3. bar 함수 코드의 평가와 실행
// 중첩 함수 bar가 호출되면 foo 함수 코드의 실행은 일시 중단되고 코드의 제어권이 bar 함수 내부로 이동한다.
// bar 함수 내부의 함수 코드를 평가하여 bar 함수 실행 컨텍스트를 생성하고 실행 컨텍스트 스택에 푸시한다.
// 이때 bar 함수의 지역 변수 z가 bar 함수 실행 컨텍스트에 등록된다.
// bar 함수 코드가 실행되기 시작하여 지역 변수 z에 값이 할당되고 console.log 메서드를호출한 이후, bar 함수는 종료된다.

// 4. foo 함수로 복귀
// bar 함수가 종료되면 코드의 제어권은 다시 fooo 함수로 이동한다.
// bar 함수 실행 컨텍스트를 실행 컨텍스트 스택에서 팝하여 제거한다.
// foo 함수는 더 이상 실행할 코드가 없으므로 종료된다.

// 5. 전역 코드로 복귀
// foo 함수가 종료되면 코드의 제어권은 다시 전역 코드로 이동한다. foo 함수 실행 컨텍스트를 실행 컨텍스트 스택에서 팝하여 제거한다.
// 더이상 실행할 전역 코드가 남아 있지 않으므로 전역 실행 컨텍스트도 실행 컨텍스트 스택에서 팝되어 실행 컨텍스트 스택에는 아무것도 남아있지 않게 된다.

// 실행 컨텍스트 스택은 코드의 실행 순서를 관리한다.
// 실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트는 언제나 현재 실행 중인 코드의 실행 컨텍스트다.
// 따라서 실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트를 실행 중인 실행 컨텍스트라 부른다.
