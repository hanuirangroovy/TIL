// 23.6 실행 컨텍스트의 생성과 식별자 검색 과정

// 23-04
var x = 1;
const y = 2;

function foo(a) {
  var x = 3;
  const y = 4;
  function bar(b) {
    const z = 5;
    console.log(a + b + x + y + z);
  }
  bar(10);
}

foo(20); // 42

// 23.6.1 전역 객체 생성
// 전역 객체는 전역 코드가 평가되기 이전에 생성된다.
// 23-05
// Object.prototype.toString
// window.toString();

// window.__proto__.__proto__.__proto__.__proto__ === Object.prototype; // true

// 23.6.2 전역 코드 평가
// 전역 코드 평가는 다음과 같은 순서로 진행된다.

// 1. 전역 실행 컨텍스트 생성
// 비어있는 전역 실행 컨텍스트를 생성하여 실행 컨텍스트 스택에 푸시한다.
// 이때 전역 실행 컨텍스트는 실행 컨텍스트 스택의 최상위, 즉 실행 중인 실행 컨텍스트가 된다.

// 2. 전역 렉시컬 환경 생성
// 전역 렉시컬 환경을 생성하고 전역 실행 컨텍스트에 바인딩한다.

//  2.1 전역 환경 레코드 생성
// 전역 렉시컬 환경을 구성하는 컴포넌트인 전역 환경 레코드는 전역 변수를 관리하는 전역 스코프, 전역 객체의 빌트인 전역 프로퍼티와 빌트인 전역 함수, 표준 빌트인 객체를 제공한다.
// 전역 환경 레코드는 객체 환경 레코드와 선언적 환경 레코드로 구성되어 있다.
// 객체 환경 레코드: 기존의 전역 객체가 관리하던 var 키워드로 선언한 전역 변수와 함수 선언문으로 정의한 저역 함수, 빌트인 전역 프로퍼티와 빌트인 전역 함수, 표준 빌트인 객체 관리
// 선언적 환경 레코드: let, const 키워드로 선언한 전역 변수 관리

//      2.1.1 객체 환경 레코드 생성
// 전역 환경 레코드를 구성하는 컴포넌트인 객체 환경 레코드는 BindingObject라고 부르는 객체와 연결.
// BindingObject는 "전역 객체 생성"에서 생성된 전역 객체다.
// 전역 코드 평가 과정에서 var 키워드로 선언한 전역 변수와 함께 함수 선언문으로 정의된 전역 함수는 전역 환경 레코드의 객체 환경 레코드에 연결된 BindingObject를 통해 전역 객체의 프로퍼티와 메서드가 된다.
// 이때 등록된 식별자를 전역 환경 레코드의 객체 환경 레코드에서 검색하면 전역 객체의 프로퍼티를 검색하여 반환한다.

// 23-06
var x6 = 1; // var 키워드로 선언한 변수. 선언 단계와 초기화 단계가 동시에 진행. 전역 코드 평가 시점에 객체 환경 레코드에 바인딩된 BindingObject를 통해 전역 객체에 변수 식별자를 키로 등록한 다음, 암묵적으로 undefined를 바인딩
const y6 = 2;

function foo(a) {}

// var 키워드로 선언한 변수는 코드 실행 단계에서 변수 선언문 이전에도 참조할 수 있다.
// 단, 변수 선언문 이전에 참조한 변수의 값은 언제나 undefined다.
// var 키워드로 선언한 변수에 할당한 함수 표현식도 이와 동일하게 동작하고 이것이 변수 호이스팅이 발생하는 원인이다.

// 함수 선언문으로 정의한 함수가 평가되면 함수 이름과 동일한 이름의 식별자를 객체 환경 레코드에 바인딩된 BindingObject를 통해 전역 객체에 키로 등록하고 생성된 함수 객체를 즉시 할당.

//      2.1.2 선언적 환경 레코드 생성
// let, const 키워드로 선언한 전역 변수는 선언적 환경 레코드에 등록되고 관리된다.
// const 키워드로 선언한 변수는 선언 단계와 초기화 단계가 분리되어 진행되기에 런타임에 실행흐름이 변수 선언문에 도달하기 전까지 일시적 사각지대에 빠지게 된다.

// let, const 키워드로 선언한 변수도 변수 호이스팅이 발생하나 런타임에 컨트롤이 변수 선언문에 도달하기 전까지 일시적 사각지대에 빠지기 때문에 참조할 수 없다.
// 23-07
let foo7 = 1;

{
  // let, const 키워드로 선언한 변수가 호이스팅되지 않는다면 전역 변수를 참조해야 한다.
  // 하지만 let키워드로 선언한 변수도 여전히 호이스팅이 발생하기 때문에
  // 참조 에러(ReferenceError)가 발생한다.
  //  console.log(foo7); // ReferenceError: Cannot access 'foo7' before initialization
  let foo7 = 2; // 지역 변수
}

//  2.2 this 바인딩

//  2.3 외부 렉시컬 환경에 대한 참조 결정

// 23.6.3 전역 코드 실행
// 동일한 이름의 식별자가 다른 스코프에 여러 개 존재할 수 있기에 어느 스코프의 식별자를 참조하면 되는지 결정할 필요가 있고 이를 식별자 결정이라 한다.
// 식별자 결정을 위해 식별자를 검색할 때는 실행 중인 실행 컨텍스트에서 식별자를 검색하기 시작한다.

// 23.6.4 foo 함수 코드 평가
// 23-08
var x8 = 1;
const y8 = 2;

function foo8(a8) {
  var x8 = 3;
  const y8 = 4;

  function bar8(b8) {
    const z8 = 5;
    console.log(a8 + b8 + x8 + y8 + z8);
  }
  bar8(10);
}

foo8(20);

// foo 함수가 호출되면 전역 코드의 실행을 잠시 중단하고 foo 함수 내부로 코드의 제어권이 이동한다. 그리고 함수 코드를 평가하기 시작한다.
// 1. 함수 실행 컨텍스트 생성
// 2. 함수 렉시컬 환경 생성
//  2.1 함수 환경 레코드 생성
//  2.2 this 바인딩
//  2.3 외부 렉시컬 환경에 대한 참조 결정
// 자바스크립트는 함수를 어디서 호출했는지가 아니라 어디에 정의했는지에 따라 상위 스코프를 결정한다

// 23.6.5 함수 코드 실행

// 23.6.6 bar 함수 코드 평가

// 23.6.7 bar 함수 코드 실행
// console.log(a8 + b8 + x8 + y8 + z8); 코드는 다음 순서로 실행된다.
// 1. console 식별자 검색
// 2. log 메서드 검색
// 23-10
console.hasOwnProperty("log"); // true

// 3. 표현식 a8 + b8 + x8 + y8 + z8의 평가
// 4. console.log 메서드 호출

// 23.6.8 bar 함수 코드 실행 종료

// 23.6.9 foo 함수 코드 실행 종료

// 23.6.10 전역 코드 실행 종료
